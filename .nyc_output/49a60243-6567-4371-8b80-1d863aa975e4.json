{"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":45,"6":45,"7":1,"8":2,"9":2,"10":1,"11":4,"12":4,"13":1},"f":{"0":1,"1":45,"2":2,"3":4},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/IInsightFacade.ts","sources":["C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7222c9381926276e7520854f71d3a0be93cd342b","contentHash":"923248bf18de17e9e7d70c7e26c832acc33fa6bc09d7552b204608dd677d8af5"},"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":22},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":56}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":55}},"7":{"start":{"line":10,"column":16},"end":{"line":10,"column":49}},"8":{"start":{"line":13,"column":20},"end":{"line":13,"column":41}},"9":{"start":{"line":14,"column":25},"end":{"line":14,"column":71}},"10":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"11":{"start":{"line":16,"column":12},"end":{"line":16,"column":78}},"12":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"13":{"start":{"line":19,"column":12},"end":{"line":19,"column":79}},"14":{"start":{"line":21,"column":24},"end":{"line":21,"column":26}},"15":{"start":{"line":22,"column":30},"end":{"line":22,"column":56}},"16":{"start":{"line":23,"column":8},"end":{"line":35,"column":9}},"17":{"start":{"line":24,"column":12},"end":{"line":24,"column":75}},"18":{"start":{"line":27,"column":12},"end":{"line":34,"column":15}},"19":{"start":{"line":28,"column":29},"end":{"line":28,"column":64}},"20":{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},"21":{"start":{"line":30,"column":20},"end":{"line":30,"column":73}},"22":{"start":{"line":32,"column":31},"end":{"line":32,"column":51}},"23":{"start":{"line":33,"column":16},"end":{"line":33,"column":37}},"24":{"start":{"line":36,"column":8},"end":{"line":36,"column":23}},"25":{"start":{"line":39,"column":25},"end":{"line":39,"column":27}},"26":{"start":{"line":40,"column":8},"end":{"line":66,"column":9}},"27":{"start":{"line":41,"column":12},"end":{"line":65,"column":13}},"28":{"start":{"line":42,"column":16},"end":{"line":64,"column":17}},"29":{"start":{"line":43,"column":20},"end":{"line":43,"column":94}},"30":{"start":{"line":46,"column":37},"end":{"line":46,"column":41}},"31":{"start":{"line":47,"column":34},"end":{"line":47,"column":46}},"32":{"start":{"line":48,"column":20},"end":{"line":50,"column":21}},"33":{"start":{"line":49,"column":24},"end":{"line":49,"column":43}},"34":{"start":{"line":51,"column":40},"end":{"line":62,"column":21}},"35":{"start":{"line":63,"column":20},"end":{"line":63,"column":47}},"36":{"start":{"line":67,"column":8},"end":{"line":67,"column":24}},"37":{"start":{"line":70,"column":8},"end":{"line":90,"column":47}},"38":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"39":{"start":{"line":93,"column":81},"end":{"line":93,"column":93}},"40":{"start":{"line":94,"column":12},"end":{"line":94,"column":68}},"41":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"42":{"start":{"line":97,"column":12},"end":{"line":97,"column":82}},"43":{"start":{"line":99,"column":8},"end":{"line":99,"column":20}},"44":{"start":{"line":102,"column":23},"end":{"line":102,"column":25}},"45":{"start":{"line":103,"column":8},"end":{"line":107,"column":9}},"46":{"start":{"line":104,"column":12},"end":{"line":104,"column":75}},"47":{"start":{"line":108,"column":8},"end":{"line":108,"column":42}},"48":{"start":{"line":109,"column":22},"end":{"line":109,"column":24}},"49":{"start":{"line":110,"column":8},"end":{"line":115,"column":9}},"50":{"start":{"line":111,"column":12},"end":{"line":111,"column":51}},"51":{"start":{"line":114,"column":12},"end":{"line":114,"column":103}},"52":{"start":{"line":116,"column":23},"end":{"line":116,"column":25}},"53":{"start":{"line":117,"column":8},"end":{"line":122,"column":9}},"54":{"start":{"line":118,"column":12},"end":{"line":118,"column":77}},"55":{"start":{"line":121,"column":12},"end":{"line":121,"column":109}},"56":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"57":{"start":{"line":124,"column":12},"end":{"line":124,"column":114}},"58":{"start":{"line":126,"column":8},"end":{"line":131,"column":11}},"59":{"start":{"line":132,"column":8},"end":{"line":132,"column":72}},"60":{"start":{"line":133,"column":8},"end":{"line":133,"column":43}},"61":{"start":{"line":133,"column":36},"end":{"line":133,"column":41}},"62":{"start":{"line":136,"column":23},"end":{"line":136,"column":25}},"63":{"start":{"line":137,"column":8},"end":{"line":141,"column":9}},"64":{"start":{"line":138,"column":12},"end":{"line":138,"column":75}},"65":{"start":{"line":142,"column":8},"end":{"line":144,"column":9}},"66":{"start":{"line":143,"column":12},"end":{"line":143,"column":69}},"67":{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},"68":{"start":{"line":145,"column":35},"end":{"line":145,"column":47}},"69":{"start":{"line":146,"column":12},"end":{"line":146,"column":72}},"70":{"start":{"line":148,"column":8},"end":{"line":148,"column":57}},"71":{"start":{"line":148,"column":43},"end":{"line":148,"column":55}},"72":{"start":{"line":149,"column":8},"end":{"line":154,"column":9}},"73":{"start":{"line":150,"column":12},"end":{"line":150,"column":76}},"74":{"start":{"line":153,"column":12},"end":{"line":153,"column":92}},"75":{"start":{"line":155,"column":8},"end":{"line":155,"column":18}},"76":{"start":{"line":159,"column":8},"end":{"line":169,"column":9}},"77":{"start":{"line":160,"column":12},"end":{"line":160,"column":65}},"78":{"start":{"line":163,"column":12},"end":{"line":168,"column":13}},"79":{"start":{"line":164,"column":16},"end":{"line":164,"column":28}},"80":{"start":{"line":167,"column":16},"end":{"line":167,"column":110}},"81":{"start":{"line":170,"column":23},"end":{"line":170,"column":25}},"82":{"start":{"line":171,"column":8},"end":{"line":175,"column":9}},"83":{"start":{"line":172,"column":12},"end":{"line":172,"column":75}},"84":{"start":{"line":176,"column":8},"end":{"line":187,"column":9}},"85":{"start":{"line":177,"column":29},"end":{"line":177,"column":72}},"86":{"start":{"line":178,"column":12},"end":{"line":178,"column":55}},"87":{"start":{"line":181,"column":12},"end":{"line":186,"column":13}},"88":{"start":{"line":182,"column":16},"end":{"line":182,"column":68}},"89":{"start":{"line":185,"column":16},"end":{"line":185,"column":93}},"90":{"start":{"line":190,"column":23},"end":{"line":190,"column":25}},"91":{"start":{"line":191,"column":8},"end":{"line":195,"column":9}},"92":{"start":{"line":192,"column":12},"end":{"line":192,"column":75}},"93":{"start":{"line":196,"column":8},"end":{"line":200,"column":12}},"94":{"start":{"line":196,"column":37},"end":{"line":200,"column":9}},"95":{"start":{"line":203,"column":0},"end":{"line":203,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":28},"end":{"line":37,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":34},"end":{"line":27,"column":35}},"loc":{"start":{"line":27,"column":58},"end":{"line":34,"column":13}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":34},"end":{"line":68,"column":5}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":26},"end":{"line":91,"column":5}},"line":69},"5":{"name":"(anonymous_5)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":33},"end":{"line":100,"column":5}},"line":92},"6":{"name":"(anonymous_6)","decl":{"start":{"line":93,"column":73},"end":{"line":93,"column":74}},"loc":{"start":{"line":93,"column":81},"end":{"line":93,"column":93}},"line":93},"7":{"name":"(anonymous_7)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":40},"end":{"line":134,"column":5}},"line":101},"8":{"name":"(anonymous_8)","decl":{"start":{"line":133,"column":28},"end":{"line":133,"column":29}},"loc":{"start":{"line":133,"column":36},"end":{"line":133,"column":41}},"line":133},"9":{"name":"(anonymous_9)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":28},"end":{"line":156,"column":5}},"line":135},"10":{"name":"(anonymous_10)","decl":{"start":{"line":145,"column":27},"end":{"line":145,"column":28}},"loc":{"start":{"line":145,"column":35},"end":{"line":145,"column":47}},"line":145},"11":{"name":"(anonymous_11)","decl":{"start":{"line":148,"column":35},"end":{"line":148,"column":36}},"loc":{"start":{"line":148,"column":43},"end":{"line":148,"column":55}},"line":148},"12":{"name":"(anonymous_12)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":30},"end":{"line":188,"column":5}},"line":157},"13":{"name":"(anonymous_13)","decl":{"start":{"line":189,"column":4},"end":{"line":189,"column":5}},"loc":{"start":{"line":189,"column":25},"end":{"line":201,"column":5}},"line":189},"14":{"name":"(anonymous_14)","decl":{"start":{"line":196,"column":28},"end":{"line":196,"column":29}},"loc":{"start":{"line":196,"column":37},"end":{"line":200,"column":9}},"line":196}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},{"start":{"line":15,"column":8},"end":{"line":17,"column":9}}],"line":15},"4":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"5":{"loc":{"start":{"line":23,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":35,"column":9}},{"start":{"line":23,"column":8},"end":{"line":35,"column":9}}],"line":23},"6":{"loc":{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},"type":"if","locations":[{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},{"start":{"line":29,"column":16},"end":{"line":31,"column":17}}],"line":29},"7":{"loc":{"start":{"line":42,"column":16},"end":{"line":64,"column":17}},"type":"if","locations":[{"start":{"line":42,"column":16},"end":{"line":64,"column":17}},{"start":{"line":42,"column":16},"end":{"line":64,"column":17}}],"line":42},"8":{"loc":{"start":{"line":48,"column":20},"end":{"line":50,"column":21}},"type":"if","locations":[{"start":{"line":48,"column":20},"end":{"line":50,"column":21}},{"start":{"line":48,"column":20},"end":{"line":50,"column":21}}],"line":48},"9":{"loc":{"start":{"line":70,"column":17},"end":{"line":90,"column":45}},"type":"binary-expr","locations":[{"start":{"line":70,"column":17},"end":{"line":70,"column":33}},{"start":{"line":71,"column":12},"end":{"line":71,"column":23}},{"start":{"line":72,"column":12},"end":{"line":72,"column":42}},{"start":{"line":73,"column":12},"end":{"line":73,"column":27}},{"start":{"line":74,"column":12},"end":{"line":74,"column":46}},{"start":{"line":75,"column":12},"end":{"line":75,"column":26}},{"start":{"line":76,"column":12},"end":{"line":76,"column":45}},{"start":{"line":77,"column":12},"end":{"line":77,"column":30}},{"start":{"line":78,"column":12},"end":{"line":78,"column":49}},{"start":{"line":79,"column":12},"end":{"line":79,"column":28}},{"start":{"line":80,"column":12},"end":{"line":80,"column":47}},{"start":{"line":81,"column":12},"end":{"line":81,"column":25}},{"start":{"line":82,"column":12},"end":{"line":82,"column":44}},{"start":{"line":83,"column":12},"end":{"line":83,"column":24}},{"start":{"line":84,"column":12},"end":{"line":84,"column":43}},{"start":{"line":85,"column":12},"end":{"line":85,"column":25}},{"start":{"line":86,"column":12},"end":{"line":86,"column":44}},{"start":{"line":87,"column":12},"end":{"line":87,"column":25}},{"start":{"line":88,"column":12},"end":{"line":88,"column":44}},{"start":{"line":89,"column":12},"end":{"line":89,"column":26}},{"start":{"line":90,"column":12},"end":{"line":90,"column":45}}],"line":70},"10":{"loc":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},{"start":{"line":93,"column":8},"end":{"line":95,"column":9}}],"line":93},"11":{"loc":{"start":{"line":93,"column":12},"end":{"line":93,"column":94}},"type":"binary-expr","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":28}},{"start":{"line":93,"column":32},"end":{"line":93,"column":48}},{"start":{"line":93,"column":52},"end":{"line":93,"column":55}},{"start":{"line":93,"column":59},"end":{"line":93,"column":94}}],"line":93},"12":{"loc":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},{"start":{"line":96,"column":8},"end":{"line":98,"column":9}}],"line":96},"13":{"loc":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},{"start":{"line":123,"column":8},"end":{"line":125,"column":9}}],"line":123},"14":{"loc":{"start":{"line":142,"column":8},"end":{"line":144,"column":9}},"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":144,"column":9}},{"start":{"line":142,"column":8},"end":{"line":144,"column":9}}],"line":142},"15":{"loc":{"start":{"line":142,"column":12},"end":{"line":142,"column":55}},"type":"binary-expr","locations":[{"start":{"line":142,"column":12},"end":{"line":142,"column":28}},{"start":{"line":142,"column":32},"end":{"line":142,"column":48}},{"start":{"line":142,"column":52},"end":{"line":142,"column":55}}],"line":142},"16":{"loc":{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},{"start":{"line":145,"column":8},"end":{"line":147,"column":9}}],"line":145},"17":{"loc":{"start":{"line":163,"column":12},"end":{"line":168,"column":13}},"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":168,"column":13}},{"start":{"line":163,"column":12},"end":{"line":168,"column":13}}],"line":163},"18":{"loc":{"start":{"line":181,"column":12},"end":{"line":186,"column":13}},"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":186,"column":13}},{"start":{"line":181,"column":12},"end":{"line":186,"column":13}}],"line":181}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":24,"9":24,"10":22,"11":0,"12":22,"13":0,"14":22,"15":22,"16":22,"17":0,"18":22,"19":36061,"20":36061,"21":0,"22":36061,"23":36061,"24":22,"25":22,"26":22,"27":36061,"28":466084,"29":0,"30":466084,"31":466084,"32":466084,"33":172545,"34":466084,"35":466084,"36":19,"37":466084,"38":35,"39":3,"40":10,"41":25,"42":1,"43":24,"44":35,"45":35,"46":35,"47":35,"48":24,"49":24,"50":24,"51":2,"52":22,"53":22,"54":22,"55":3,"56":19,"57":0,"58":19,"59":19,"60":19,"61":21,"62":9,"63":9,"64":9,"65":9,"66":2,"67":7,"68":5,"69":2,"70":5,"71":5,"72":5,"73":5,"74":0,"75":5,"76":38,"77":38,"78":6,"79":6,"80":0,"81":32,"82":32,"83":32,"84":32,"85":32,"86":32,"87":7,"88":2,"89":5,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1},"f":{"0":2,"1":24,"2":36061,"3":22,"4":466084,"5":35,"6":3,"7":35,"8":21,"9":9,"10":5,"11":5,"12":38,"13":0,"14":0},"b":{"0":[1,1,1],"1":[0,2],"2":[2,2],"3":[0,22],"4":[0,22],"5":[0,22],"6":[0,36061],"7":[0,466084],"8":[172545,293539],"9":[466084,466084,466084,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"10":[10,25],"11":[35,30,26,26],"12":[1,24],"13":[0,19],"14":[2,7],"15":[9,8,7],"16":[2,5],"17":[6,0],"18":[2,5]},"inputSourceMap":{"version":3,"file":"C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/InsightFacade.ts","sources":["C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n\tResultTooLargeError,\n} from \"./IInsightFacade\";\nimport { QueryParser } from \"./query/QueryParser\";\nimport { Query } from \"./query/IQuery\";\nimport { QueryExecutor } from \"./query/QueryExecutor\";\n\nimport { Section } from \"./SectionModel\";\n\nimport fs from \"fs-extra\";\nimport JSZip from \"jszip\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\t// create list of courses from reading the file content\n\tpublic async readData(content: string): Promise<Promise<string>[]> {\n\t\t// https://stuk.github.io/jszip/documentation/api_jszip/load_async.html\n\t\t// read content zip file ensuring it is base64\n\t\tconst zip = new JSZip();\n\t\tconst unzipped = await zip.loadAsync(content, { base64: true });\n\t\tif (!unzipped) {\n\t\t\tthrow new InsightError(\"unable to read content\");\n\t\t}\n\t\t// check for courses folder\n\t\tif (!unzipped.files[\"courses/\"]) {\n\t\t\tthrow new InsightError(\"courses folder missing.\");\n\t\t}\n\t\t// list for courses\n\t\tconst courses: Promise<string>[] = [];\n\t\tconst coursesFolder = unzipped.folder(\"courses\");\n\t\tif (coursesFolder === null) {\n\t\t\tthrow new InsightError(\"null courses folder\");\n\t\t} else {\n\t\t\t// add all the courses in the courses folder in the created courses list\n\t\t\tcoursesFolder.forEach(function (relativePath: string) {\n\t\t\t\tconst file = zip.file(\"courses/\" + relativePath);\n\t\t\t\tif (file === null) {\n\t\t\t\t\tthrow new InsightError(\"null file\");\n\t\t\t\t}\n\t\t\t\tconst course = file.async(\"string\");\n\t\t\t\tcourses.push(course);\n\t\t\t});\n\t\t}\n\t\treturn courses;\n\t}\n\n\t// create sections based on section data model from the file data\n\tpublic async createSections(courses: string[]): Promise<Section[]> {\n\t\tconst sections: Section[] = [];\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\t\t// go through each course in the courses list\n\t\tfor (const course of courses) {\n\t\t\t// go through the sections in each course\n\t\t\tfor (const section of JSON.parse(course).result) {\n\t\t\t\t// check valid section - contains every field in proper format\n\t\t\t\tif (this.validSection(section)) {\n\t\t\t\t\tthrow new InsightError(\"invalid section or no sections\");\n\t\t\t\t} else {\n\t\t\t\t\t// setYear is year, but change to be 1900 if Section = overall\n\t\t\t\t\tconst autoYear = 1900;\n\t\t\t\t\tlet setYear = section.Year;\n\t\t\t\t\tif (section.Section === \"overall\") {\n\t\t\t\t\t\tsetYear = autoYear;\n\t\t\t\t\t}\n\t\t\t\t\t// create section\n\t\t\t\t\tconst currSection: Section = {\n\t\t\t\t\t\tuuid: section.id,\n\t\t\t\t\t\tid: section.Course,\n\t\t\t\t\t\ttitle: section.Title,\n\t\t\t\t\t\tinstructor: section.Professor,\n\t\t\t\t\t\tdept: section.Subject,\n\t\t\t\t\t\tyear: setYear,\n\t\t\t\t\t\tavg: section.Avg,\n\t\t\t\t\t\tpass: section.Pass,\n\t\t\t\t\t\tfail: section.Fail,\n\t\t\t\t\t\taudit: section.Audit,\n\t\t\t\t\t};\n\t\t\t\t\t// add section to sections list\n\t\t\t\t\tsections.push(currSection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sections;\n\t}\n\n\t// check if a given section is valid - contains every field of interest and in the proper format\n\tpublic validSection(section: any): Boolean {\n\t\treturn !(\n\t\t\tsection === null ||\n\t\t\t!section.id ||\n\t\t\ttypeof section.id !== \"string\" ||\n\t\t\t!section.Course ||\n\t\t\ttypeof section.Course !== \"string\" ||\n\t\t\t!section.Title ||\n\t\t\ttypeof section.Title !== \"string\" ||\n\t\t\t!section.Professor ||\n\t\t\ttypeof section.Professor !== \"string\" ||\n\t\t\t!section.Subject ||\n\t\t\ttypeof section.Subject !== \"string\" ||\n\t\t\t!section.Year ||\n\t\t\ttypeof section.Year !== \"number\" ||\n\t\t\t!section.Avg ||\n\t\t\ttypeof section.Avg !== \"number\" ||\n\t\t\t!section.Pass ||\n\t\t\ttypeof section.Pass !== \"number\" ||\n\t\t\t!section.Fail ||\n\t\t\ttypeof section.Fail !== \"number\" ||\n\t\t\t!section.Audit ||\n\t\t\ttypeof section.Audit !== \"number\"\n\t\t);\n\t}\n\n\tpublic checkArg(id: string, kind: InsightDatasetKind, datasets: any[]): Boolean {\n\t\t// if id has underscore or\n\t\t// is empty after removing whitespaces or\n\t\t// is an existing id string added, throw error for invalid id\n\t\tif (id.includes(\"_\") || id.trim() === \"\" || !id || datasets.some((ds: any) => ds.id === id)) {\n\t\t\tthrow new InsightError(\"invalid id!!\");\n\t\t}\n\t\t// throw error if the kind is not sections\n\t\tif (kind !== InsightDatasetKind.Sections) {\n\t\t\tthrow new InsightError(\"invalid kind: not sections\");\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\t// datasets added -- get data in disk if there are any\n\t\tlet datasets: any[] = [];\n\t\ttry {\n\t\t\tdatasets = await fs.readJSON(\"data/data.JSON\");\n\t\t} catch {\n\t\t\t/* empty */\n\t\t}\n\t\t// throw errors for id and kind arguments if any\n\t\tthis.checkArg(id, kind, datasets);\n\t\t// read data and get courses (files)\n\t\tlet courses: Promise<string>[] = [];\n\t\ttry {\n\t\t\tcourses = await this.readData(content);\n\t\t} catch (err) {\n\t\t\tthrow new InsightError(\"unable to read data successfully. error: \" + err);\n\t\t}\n\t\t// create sections following created Section data model\n\t\tlet sections: Section[] = [];\n\t\ttry {\n\t\t\tsections = await this.createSections(await Promise.all(courses));\n\t\t} catch (err) {\n\t\t\tthrow new InsightError(\"unable to create sections successfully. error: \" + err);\n\t\t}\n\t\t// check if course is invalid - does not have 1 or more valid sections\n\t\tif (sections.length === 0) {\n\t\t\tthrow new InsightError(\"invalid course: doesn't contain one or more valid sections\");\n\t\t}\n\t\t// add to datasetList\n\t\tdatasets.push({\n\t\t\tid: id,\n\t\t\tkind: kind,\n\t\t\tnumRows: sections.length,\n\t\t\tdata: sections,\n\t\t});\n\t\t// write to disk\n\t\tawait fs.outputJSON(\"data/data.JSON\", datasets);\n\t\t// return ids of current successfully added datasets\n\t\treturn datasets.map((ds: any) => ds.id);\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\t// datasets added -- get data in disk if there are any\n\t\tlet datasets: any[] = [];\n\t\ttry {\n\t\t\tdatasets = await fs.readJSON(\"data/data.JSON\");\n\t\t} catch {\n\t\t\t/* empty */\n\t\t}\n\t\t// if id has underscore or is empty after removing whitespaces, throw error for invalid id\n\t\tif (id.includes(\"_\") || id.trim() === \"\" || !id) {\n\t\t\tthrow new InsightError(\"invalid id :(\");\n\t\t}\n\t\t// if the id isn't in the list of successfully added ids, throw NotFoundError\n\t\tif (!datasets.some((ds: any) => ds.id === id)) {\n\t\t\tthrow new NotFoundError(\"id not found :(\");\n\t\t}\n\t\t// update the list to be filter out any datasets in the list that have the id to remove\n\t\tdatasets = datasets.filter((ds: any) => ds.id !== id);\n\t\t// caching\n\t\ttry {\n\t\t\t// update with updated datasets with removed dataset\n\t\t\tawait fs.outputJSON(\"data/data.JSON\", datasets);\n\t\t} catch (err) {\n\t\t\tthrow new InsightError(\"unable to cache due to error: \" + err);\n\t\t}\n\t\t// promise fulfills id of dataset removed\n\t\treturn id;\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tlet parsedQuery: Query;\n\t\ttry {\n\t\t\tparsedQuery = QueryParser.parse(query);\n\t\t\t//console.log(parsedQuery);\n\t\t} catch (error) {\n\t\t\tif (error instanceof InsightError) {\n\t\t\t\tthrow error;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"An unexpected error occurred during query parsing.\");\n\t\t\t}\n\t\t}\n\t\t// datasets added -- get data in disk if there are any\n\t\tlet datasets: any[] = [];\n\t\ttry {\n\t\t\tdatasets = await fs.readJSON(\"data/data.JSON\");\n\t\t\t//console.log(datasets);\n\t\t} catch {\n\t\t\t/* empty */\n\t\t}\n\t\ttry {\n\t\t\tconst executor = new QueryExecutor(datasets);\n\t\t\treturn await executor.execute(parsedQuery);\n\t\t} catch (error) {\n\t\t\tif (error instanceof ResultTooLargeError) {\n\t\t\t\tthrow new ResultTooLargeError(\"L\");\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Failed to execute query: ${error}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\t// datasets added -- get data in disk if there are any\n\t\tlet datasets: any[] = [];\n\t\ttry {\n\t\t\tdatasets = await fs.readJSON(\"data/data.JSON\");\n\t\t} catch {\n\t\t\t/* empty */\n\t\t}\n\t\t// only return id, kind and numRows of the added datasets\n\t\treturn datasets.map((ds: any) => ({\n\t\t\tid: ds.id,\n\t\t\tkind: ds.kind,\n\t\t\tnumRows: ds.numRows,\n\t\t}));\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb504f94e3d85eb8c56a7316d246a19c100b2215","contentHash":"41edc1d5da7afa60923e9881b7fbbe36b5f347a958c127849ba639bef964382c"},"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\query\\QueryParser.ts":{"path":"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\query\\QueryParser.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":53}},"3":{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},"4":{"start":{"line":8,"column":12},"end":{"line":8,"column":80}},"5":{"start":{"line":10,"column":33},"end":{"line":10,"column":38}},"6":{"start":{"line":11,"column":25},"end":{"line":11,"column":27}},"7":{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},"8":{"start":{"line":13,"column":12},"end":{"line":13,"column":64}},"9":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"10":{"start":{"line":16,"column":12},"end":{"line":16,"column":93}},"11":{"start":{"line":18,"column":22},"end":{"line":18,"column":54}},"12":{"start":{"line":19,"column":24},"end":{"line":19,"column":59}},"13":{"start":{"line":20,"column":8},"end":{"line":20,"column":50}},"14":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"15":{"start":{"line":24,"column":12},"end":{"line":24,"column":37}},"16":{"start":{"line":26,"column":8},"end":{"line":40,"column":9}},"17":{"start":{"line":27,"column":12},"end":{"line":27,"column":53}},"18":{"start":{"line":29,"column":13},"end":{"line":40,"column":9}},"19":{"start":{"line":30,"column":12},"end":{"line":30,"column":46}},"20":{"start":{"line":32,"column":13},"end":{"line":40,"column":9}},"21":{"start":{"line":33,"column":12},"end":{"line":33,"column":49}},"22":{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},"23":{"start":{"line":36,"column":12},"end":{"line":36,"column":49}},"24":{"start":{"line":39,"column":12},"end":{"line":39,"column":87}},"25":{"start":{"line":43,"column":25},"end":{"line":43,"column":55}},"26":{"start":{"line":44,"column":29},"end":{"line":44,"column":45}},"27":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"28":{"start":{"line":46,"column":12},"end":{"line":46,"column":94}},"29":{"start":{"line":48,"column":24},"end":{"line":48,"column":84}},"30":{"start":{"line":48,"column":56},"end":{"line":48,"column":83}},"31":{"start":{"line":49,"column":8},"end":{"line":53,"column":10}},"32":{"start":{"line":56,"column":31},"end":{"line":56,"column":41}},"33":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"34":{"start":{"line":58,"column":12},"end":{"line":58,"column":77}},"35":{"start":{"line":60,"column":29},"end":{"line":60,"column":61}},"36":{"start":{"line":61,"column":8},"end":{"line":64,"column":10}},"37":{"start":{"line":67,"column":25},"end":{"line":67,"column":77}},"38":{"start":{"line":68,"column":28},"end":{"line":68,"column":44}},"39":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"40":{"start":{"line":70,"column":12},"end":{"line":70,"column":86}},"41":{"start":{"line":72,"column":21},"end":{"line":72,"column":45}},"42":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"43":{"start":{"line":74,"column":12},"end":{"line":74,"column":94}},"44":{"start":{"line":76,"column":20},"end":{"line":76,"column":27}},"45":{"start":{"line":77,"column":22},"end":{"line":77,"column":38}},"46":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"47":{"start":{"line":79,"column":12},"end":{"line":79,"column":94}},"48":{"start":{"line":81,"column":8},"end":{"line":86,"column":10}},"49":{"start":{"line":89,"column":25},"end":{"line":89,"column":29}},"50":{"start":{"line":90,"column":28},"end":{"line":90,"column":44}},"51":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"52":{"start":{"line":92,"column":12},"end":{"line":92,"column":86}},"53":{"start":{"line":94,"column":21},"end":{"line":94,"column":45}},"54":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"55":{"start":{"line":96,"column":12},"end":{"line":96,"column":94}},"56":{"start":{"line":98,"column":20},"end":{"line":98,"column":27}},"57":{"start":{"line":99,"column":22},"end":{"line":99,"column":38}},"58":{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},"59":{"start":{"line":101,"column":12},"end":{"line":101,"column":94}},"60":{"start":{"line":103,"column":8},"end":{"line":108,"column":10}},"61":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"62":{"start":{"line":112,"column":12},"end":{"line":112,"column":82}},"63":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"64":{"start":{"line":115,"column":12},"end":{"line":115,"column":85}},"65":{"start":{"line":117,"column":24},"end":{"line":117,"column":39}},"66":{"start":{"line":118,"column":8},"end":{"line":120,"column":9}},"67":{"start":{"line":119,"column":12},"end":{"line":119,"column":90}},"68":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"69":{"start":{"line":123,"column":12},"end":{"line":123,"column":60}},"70":{"start":{"line":125,"column":30},"end":{"line":127,"column":9}},"71":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"72":{"start":{"line":129,"column":12},"end":{"line":129,"column":40}},"73":{"start":{"line":131,"column":8},"end":{"line":131,"column":29}},"74":{"start":{"line":134,"column":8},"end":{"line":145,"column":9}},"75":{"start":{"line":135,"column":12},"end":{"line":137,"column":13}},"76":{"start":{"line":136,"column":16},"end":{"line":136,"column":89}},"77":{"start":{"line":138,"column":12},"end":{"line":138,"column":25}},"78":{"start":{"line":140,"column":13},"end":{"line":145,"column":9}},"79":{"start":{"line":141,"column":12},"end":{"line":141,"column":57}},"80":{"start":{"line":144,"column":12},"end":{"line":144,"column":92}},"81":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"82":{"start":{"line":149,"column":12},"end":{"line":149,"column":95}},"83":{"start":{"line":151,"column":20},"end":{"line":151,"column":32}},"84":{"start":{"line":152,"column":21},"end":{"line":152,"column":34}},"85":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"86":{"start":{"line":154,"column":12},"end":{"line":154,"column":89}},"87":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"88":{"start":{"line":157,"column":12},"end":{"line":157,"column":93}},"89":{"start":{"line":159,"column":8},"end":{"line":163,"column":9}},"90":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"91":{"start":{"line":161,"column":16},"end":{"line":161,"column":90}},"92":{"start":{"line":164,"column":8},"end":{"line":167,"column":10}},"93":{"start":{"line":170,"column":0},"end":{"line":170,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":24},"end":{"line":21,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":31},"end":{"line":41,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":40},"end":{"line":54,"column":5}},"line":42},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":41},"end":{"line":48,"column":42}},"loc":{"start":{"line":48,"column":56},"end":{"line":48,"column":83}},"line":48},"4":{"name":"(anonymous_4)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":33},"end":{"line":65,"column":5}},"line":55},"5":{"name":"(anonymous_5)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":36},"end":{"line":87,"column":5}},"line":66},"6":{"name":"(anonymous_6)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":36},"end":{"line":109,"column":5}},"line":88},"7":{"name":"(anonymous_7)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":33},"end":{"line":132,"column":5}},"line":110},"8":{"name":"(anonymous_8)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":38},"end":{"line":146,"column":5}},"line":133},"9":{"name":"(anonymous_9)","decl":{"start":{"line":147,"column":4},"end":{"line":147,"column":5}},"loc":{"start":{"line":147,"column":47},"end":{"line":168,"column":5}},"line":147}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},"type":"if","locations":[{"start":{"line":7,"column":8},"end":{"line":9,"column":9}},{"start":{"line":7,"column":8},"end":{"line":9,"column":9}}],"line":7},"1":{"loc":{"start":{"line":7,"column":12},"end":{"line":7,"column":55}},"type":"binary-expr","locations":[{"start":{"line":7,"column":12},"end":{"line":7,"column":37}},{"start":{"line":7,"column":41},"end":{"line":7,"column":55}}],"line":7},"2":{"loc":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},{"start":{"line":15,"column":8},"end":{"line":17,"column":9}}],"line":15},"3":{"loc":{"start":{"line":15,"column":12},"end":{"line":15,"column":62}},"type":"binary-expr","locations":[{"start":{"line":15,"column":12},"end":{"line":15,"column":34}},{"start":{"line":15,"column":38},"end":{"line":15,"column":62}}],"line":15},"4":{"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},{"start":{"line":23,"column":8},"end":{"line":25,"column":9}}],"line":23},"5":{"loc":{"start":{"line":26,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":40,"column":9}},{"start":{"line":26,"column":8},"end":{"line":40,"column":9}}],"line":26},"6":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":45}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":27}},{"start":{"line":26,"column":31},"end":{"line":26,"column":45}}],"line":26},"7":{"loc":{"start":{"line":29,"column":13},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":13},"end":{"line":40,"column":9}},{"start":{"line":29,"column":13},"end":{"line":40,"column":9}}],"line":29},"8":{"loc":{"start":{"line":32,"column":13},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":13},"end":{"line":40,"column":9}},{"start":{"line":32,"column":13},"end":{"line":40,"column":9}}],"line":32},"9":{"loc":{"start":{"line":32,"column":17},"end":{"line":32,"column":67}},"type":"binary-expr","locations":[{"start":{"line":32,"column":17},"end":{"line":32,"column":31}},{"start":{"line":32,"column":35},"end":{"line":32,"column":49}},{"start":{"line":32,"column":53},"end":{"line":32,"column":67}}],"line":32},"10":{"loc":{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},{"start":{"line":35,"column":13},"end":{"line":40,"column":9}}],"line":35},"11":{"loc":{"start":{"line":43,"column":25},"end":{"line":43,"column":55}},"type":"cond-expr","locations":[{"start":{"line":43,"column":43},"end":{"line":43,"column":48}},{"start":{"line":43,"column":51},"end":{"line":43,"column":55}}],"line":43},"12":{"loc":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},{"start":{"line":45,"column":8},"end":{"line":47,"column":9}}],"line":45},"13":{"loc":{"start":{"line":45,"column":12},"end":{"line":45,"column":69}},"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":40}},{"start":{"line":45,"column":44},"end":{"line":45,"column":69}}],"line":45},"14":{"loc":{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":59,"column":9}},{"start":{"line":57,"column":8},"end":{"line":59,"column":9}}],"line":57},"15":{"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":73}},"type":"binary-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":46}},{"start":{"line":57,"column":50},"end":{"line":57,"column":73}}],"line":57},"16":{"loc":{"start":{"line":67,"column":25},"end":{"line":67,"column":77}},"type":"cond-expr","locations":[{"start":{"line":67,"column":42},"end":{"line":67,"column":46}},{"start":{"line":67,"column":49},"end":{"line":67,"column":77}}],"line":67},"17":{"loc":{"start":{"line":67,"column":49},"end":{"line":67,"column":77}},"type":"cond-expr","locations":[{"start":{"line":67,"column":66},"end":{"line":67,"column":70}},{"start":{"line":67,"column":73},"end":{"line":67,"column":77}}],"line":67},"18":{"loc":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},{"start":{"line":69,"column":8},"end":{"line":71,"column":9}}],"line":69},"19":{"loc":{"start":{"line":69,"column":12},"end":{"line":69,"column":67}},"type":"binary-expr","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":43}},{"start":{"line":69,"column":47},"end":{"line":69,"column":67}}],"line":69},"20":{"loc":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},{"start":{"line":73,"column":8},"end":{"line":75,"column":9}}],"line":73},"21":{"loc":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},{"start":{"line":78,"column":8},"end":{"line":80,"column":9}}],"line":78},"22":{"loc":{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":93,"column":9}},{"start":{"line":91,"column":8},"end":{"line":93,"column":9}}],"line":91},"23":{"loc":{"start":{"line":91,"column":12},"end":{"line":91,"column":67}},"type":"binary-expr","locations":[{"start":{"line":91,"column":12},"end":{"line":91,"column":43}},{"start":{"line":91,"column":47},"end":{"line":91,"column":67}}],"line":91},"24":{"loc":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},{"start":{"line":95,"column":8},"end":{"line":97,"column":9}}],"line":95},"25":{"loc":{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},{"start":{"line":100,"column":8},"end":{"line":102,"column":9}}],"line":100},"26":{"loc":{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":113,"column":9}},{"start":{"line":111,"column":8},"end":{"line":113,"column":9}}],"line":111},"27":{"loc":{"start":{"line":111,"column":12},"end":{"line":111,"column":59}},"type":"binary-expr","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":39}},{"start":{"line":111,"column":43},"end":{"line":111,"column":59}}],"line":111},"28":{"loc":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},{"start":{"line":114,"column":8},"end":{"line":116,"column":9}}],"line":114},"29":{"loc":{"start":{"line":118,"column":8},"end":{"line":120,"column":9}},"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":120,"column":9}},{"start":{"line":118,"column":8},"end":{"line":120,"column":9}}],"line":118},"30":{"loc":{"start":{"line":118,"column":12},"end":{"line":118,"column":59}},"type":"binary-expr","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":35}},{"start":{"line":118,"column":39},"end":{"line":118,"column":59}}],"line":118},"31":{"loc":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},{"start":{"line":122,"column":8},"end":{"line":124,"column":9}}],"line":122},"32":{"loc":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},{"start":{"line":128,"column":8},"end":{"line":130,"column":9}}],"line":128},"33":{"loc":{"start":{"line":134,"column":8},"end":{"line":145,"column":9}},"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":145,"column":9}},{"start":{"line":134,"column":8},"end":{"line":145,"column":9}}],"line":134},"34":{"loc":{"start":{"line":135,"column":12},"end":{"line":137,"column":13}},"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":137,"column":13}},{"start":{"line":135,"column":12},"end":{"line":137,"column":13}}],"line":135},"35":{"loc":{"start":{"line":140,"column":13},"end":{"line":145,"column":9}},"type":"if","locations":[{"start":{"line":140,"column":13},"end":{"line":145,"column":9}},{"start":{"line":140,"column":13},"end":{"line":145,"column":9}}],"line":140},"36":{"loc":{"start":{"line":140,"column":17},"end":{"line":140,"column":60}},"type":"binary-expr","locations":[{"start":{"line":140,"column":17},"end":{"line":140,"column":42}},{"start":{"line":140,"column":46},"end":{"line":140,"column":60}}],"line":140},"37":{"loc":{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":150,"column":9}},{"start":{"line":148,"column":8},"end":{"line":150,"column":9}}],"line":148},"38":{"loc":{"start":{"line":148,"column":12},"end":{"line":148,"column":57}},"type":"binary-expr","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":32}},{"start":{"line":148,"column":36},"end":{"line":148,"column":57}}],"line":148},"39":{"loc":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},{"start":{"line":153,"column":8},"end":{"line":155,"column":9}}],"line":153},"40":{"loc":{"start":{"line":153,"column":12},"end":{"line":153,"column":42}},"type":"binary-expr","locations":[{"start":{"line":153,"column":12},"end":{"line":153,"column":24}},{"start":{"line":153,"column":28},"end":{"line":153,"column":42}}],"line":153},"41":{"loc":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},{"start":{"line":156,"column":8},"end":{"line":158,"column":9}}],"line":156},"42":{"loc":{"start":{"line":156,"column":12},"end":{"line":156,"column":53}},"type":"binary-expr","locations":[{"start":{"line":156,"column":12},"end":{"line":156,"column":32}},{"start":{"line":156,"column":36},"end":{"line":156,"column":53}}],"line":156},"43":{"loc":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},{"start":{"line":160,"column":12},"end":{"line":162,"column":13}}],"line":160}},"s":{"0":1,"1":1,"2":1,"3":56,"4":1,"5":55,"6":55,"7":55,"8":105,"9":55,"10":4,"11":51,"12":46,"13":39,"14":117,"15":8,"16":109,"17":30,"18":79,"19":3,"20":76,"21":49,"22":27,"23":25,"24":2,"25":30,"26":30,"27":30,"28":1,"29":29,"30":63,"31":28,"32":3,"33":3,"34":0,"35":3,"36":3,"37":49,"38":49,"39":49,"40":0,"41":49,"42":49,"43":0,"44":49,"45":49,"46":49,"47":1,"48":48,"49":25,"50":25,"51":25,"52":0,"53":25,"54":25,"55":0,"56":25,"57":25,"58":25,"59":1,"60":24,"61":46,"62":0,"63":46,"64":1,"65":45,"66":45,"67":1,"68":44,"69":23,"70":39,"71":39,"72":18,"73":39,"74":23,"75":18,"76":2,"77":16,"78":5,"79":4,"80":1,"81":4,"82":0,"83":4,"84":4,"85":4,"86":1,"87":3,"88":0,"89":3,"90":4,"91":1,"92":2,"93":1},"f":{"0":56,"1":117,"2":30,"3":63,"4":3,"5":49,"6":25,"7":46,"8":23,"9":4},"b":{"0":[1,55],"1":[56,55],"2":[4,51],"3":[55,52],"4":[8,109],"5":[30,79],"6":[109,93],"7":[3,76],"8":[49,27],"9":[76,50,38],"10":[25,2],"11":[16,14],"12":[1,29],"13":[30,29],"14":[0,3],"15":[3,3],"16":[26,23],"17":[12,11],"18":[0,49],"19":[49,49],"20":[0,49],"21":[1,48],"22":[0,25],"23":[25,25],"24":[0,25],"25":[1,24],"26":[0,46],"27":[46,46],"28":[1,45],"29":[1,44],"30":[45,45],"31":[23,21],"32":[18,21],"33":[18,5],"34":[2,16],"35":[4,1],"36":[5,4],"37":[0,4],"38":[4,4],"39":[1,3],"40":[4,2],"41":[0,3],"42":[3,3],"43":[1,3]},"inputSourceMap":{"version":3,"file":"C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/query/QueryParser.ts","sources":["C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/query/QueryParser.ts"],"names":[],"mappings":";;;AAWA,sDAAiD;AAEjD,MAAa,WAAW;IAChB,MAAM,CAAC,KAAK,CAAC,KAAc;QACjC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;YAChD,MAAM,IAAI,6BAAY,CAAC,0BAA0B,CAAC,CAAC;SACnD;QAED,MAAM,gBAAgB,GAAG,KAAY,CAAC;QACtC,MAAM,QAAQ,GAAQ,EAAE,CAAC;QAEzB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAChD,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;SACpD;QAED,IAAI,CAAC,CAAC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,QAAQ,CAAC,EAAE;YACvD,MAAM,IAAI,6BAAY,CAAC,uCAAuC,CAAC,CAAC;SAChE;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEpD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;IAC3C,CAAC;IAEO,MAAM,CAAC,WAAW,CAAC,MAAW;QACrC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAErC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;SACzB;QAED,IAAI,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,EAAE;YACtC,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;SACzC;aAAM,IAAI,KAAK,IAAI,MAAM,EAAE;YAC3B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAClC;aAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,EAAE;YAC9D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACrC;aAAM,IAAI,IAAI,IAAI,MAAM,EAAE;YAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACrC;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,iCAAiC,CAAC,CAAC;SAC1D;IACF,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAAC,MAAW;QAC9C,MAAM,QAAQ,GAAG,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAChD,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9D,MAAM,IAAI,6BAAY,CAAC,GAAG,QAAQ,6BAA6B,CAAC,CAAC;SACjE;QAED,MAAM,OAAO,GAAa,YAAY,CAAC,GAAG,CAAC,CAAC,SAAc,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5F,OAAO;YACN,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,OAAO;SAChB,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,MAAW;QACvC,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC;QAElC,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,cAAc,KAAK,IAAI,EAAE;YAClE,MAAM,IAAI,6BAAY,CAAC,uBAAuB,CAAC,CAAC;SAChD;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAEtD,OAAO;YACN,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,YAAY;SACpB,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,MAAW;QAC1C,MAAM,QAAQ,GAAG,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACtE,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAErC,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,KAAK,IAAI,EAAE;YAC5D,MAAM,IAAI,6BAAY,CAAC,GAAG,QAAQ,qBAAqB,CAAC,CAAC;SACzD;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,6BAAY,CAAC,GAAG,QAAQ,6BAA6B,CAAC,CAAC;SACjE;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,6BAAY,CAAC,YAAY,QAAQ,oBAAoB,CAAC,CAAC;SACjE;QAED,OAAO;YACN,IAAI,EAAE,aAAa;YACnB,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;SACZ,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,MAAW;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAErC,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,KAAK,IAAI,EAAE;YAC5D,MAAM,IAAI,6BAAY,CAAC,GAAG,QAAQ,qBAAqB,CAAC,CAAC;SACzD;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,6BAAY,CAAC,GAAG,QAAQ,6BAA6B,CAAC,CAAC;SACjE;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,6BAAY,CAAC,YAAY,QAAQ,oBAAoB,CAAC,CAAC;SACjE;QAED,OAAO;YACN,IAAI,EAAE,aAAa;YACnB,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;SACZ,CAAC;IACH,CAAC;IAEO,MAAM,CAAC,YAAY,CAAC,OAAY;QACvC,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;YACpD,MAAM,IAAI,6BAAY,CAAC,4BAA4B,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,EAAE;YAC5B,MAAM,IAAI,6BAAY,CAAC,+BAA+B,CAAC,CAAC;SACxD;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAEhC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACpD,MAAM,IAAI,6BAAY,CAAC,oCAAoC,CAAC,CAAC;SAC7D;QAQD,IAAI,KAAwB,CAAC;QAC7B,IAAI,OAAO,IAAI,OAAO,EAAE;YACvB,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAChD;QAED,MAAM,aAAa,GAAY;YAC9B,OAAO,EAAE,OAAO;SAChB,CAAC;QACF,IAAI,KAAK,KAAK,SAAS,EAAE;YACxB,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC;SAC5B;QACD,OAAO,aAAa,CAAC;IACtB,CAAC;IAEO,MAAM,CAAC,UAAU,CAAC,KAAU,EAAE,OAAiB;QACtD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC7B,MAAM,IAAI,6BAAY,CAAC,+BAA+B,CAAC,CAAC;aACxD;YACD,OAAO,KAAK,CAAC;SACb;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;YACvD,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC7C;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,sCAAsC,CAAC,CAAC;SAC/D;IACF,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,QAAa,EAAE,OAAiB;QAC/D,IAAI,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,EAAE;YAClD,MAAM,IAAI,6BAAY,CAAC,yCAAyC,CAAC,CAAC;SAClE;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;QACzB,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAE3B,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,EAAE;YACnC,MAAM,IAAI,6BAAY,CAAC,mCAAmC,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9C,MAAM,IAAI,6BAAY,CAAC,uCAAuC,CAAC,CAAC;SAChE;QAED,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YAIvB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC3B,MAAM,IAAI,6BAAY,CAAC,gCAAgC,CAAC,CAAC;aACzD;SACD;QAED,OAAO;YACN,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;SACV,CAAC;IACH,CAAC;CACD;AAlND,kCAkNC","sourcesContent":["import {\n\tQuery,\n\tFilter,\n\tOptions,\n\tComparison,\n\tLogicComparison,\n\tNegation,\n\t//EmptyFilter, //TODO: add this :(\n\tOrder,\n\tOrderObject,\n} from \"./IQuery\";\nimport { InsightError } from \"../IInsightFacade\";\n\nexport class QueryParser {\n\tpublic static parse(query: unknown): Query {\n\t\tif (typeof query !== \"object\" || query === null) {\n\t\t\tthrow new InsightError(\"Query must be an object.\");\n\t\t}\n\n\t\tconst queryObjOriginal = query as any;\n\t\tconst queryObj: any = {};\n\n\t\tfor (const key of Object.keys(queryObjOriginal)) {\n\t\t\tqueryObj[key.toUpperCase()] = queryObjOriginal[key];\n\t\t}\n\n\t\tif (!(\"WHERE\" in queryObj) || !(\"OPTIONS\" in queryObj)) {\n\t\t\tthrow new InsightError(\"Query must contain WHERE and OPTIONS.\");\n\t\t}\n\n\t\tconst where = this.parseFilter(queryObj.WHERE);\n\t\tconst options = this.parseOptions(queryObj.OPTIONS);\n\n\t\treturn { WHERE: where, OPTIONS: options };\n\t}\n\n\tprivate static parseFilter(filter: any): Filter {\n\t\tif (Object.keys(filter).length === 0) {\n\t\t\t// Empty WHERE clause\n\t\t\treturn { type: \"EMPTY\" };\n\t\t}\n\n\t\tif (\"AND\" in filter || \"OR\" in filter) {\n\t\t\treturn this.parseLogicComparison(filter);\n\t\t} else if (\"NOT\" in filter) {\n\t\t\treturn this.parseNegation(filter);\n\t\t} else if (\"GT\" in filter || \"LT\" in filter || \"EQ\" in filter) {\n\t\t\treturn this.parseMComparison(filter);\n\t\t} else if (\"IS\" in filter) {\n\t\t\treturn this.parseSComparison(filter);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid filter in WHERE clause.\");\n\t\t}\n\t}\n\n\tprivate static parseLogicComparison(filter: any): LogicComparison {\n\t\tconst operator = \"AND\" in filter ? \"AND\" : \"OR\";\n\t\tconst filtersArray = filter[operator];\n\n\t\tif (!Array.isArray(filtersArray) || filtersArray.length === 0) {\n\t\t\tthrow new InsightError(`${operator} must be a non-empty array.`);\n\t\t}\n\n\t\tconst filters: Filter[] = filtersArray.map((subFilter: any) => this.parseFilter(subFilter));\n\n\t\treturn {\n\t\t\ttype: \"LOGIC\",\n\t\t\toperator: operator,\n\t\t\tfilters: filters,\n\t\t};\n\t}\n\n\tprivate static parseNegation(filter: any): Negation {\n\t\tconst negationFilter = filter.NOT;\n\n\t\tif (typeof negationFilter !== \"object\" || negationFilter === null) {\n\t\t\tthrow new InsightError(\"NOT must be a filter.\");\n\t\t}\n\n\t\tconst parsedFilter = this.parseFilter(negationFilter);\n\n\t\treturn {\n\t\t\ttype: \"NOT\",\n\t\t\tfilter: parsedFilter,\n\t\t};\n\t}\n\n\tprivate static parseMComparison(filter: any): Comparison {\n\t\tconst operator = \"GT\" in filter ? \"GT\" : \"LT\" in filter ? \"LT\" : \"EQ\";\n\t\tconst mComparator = filter[operator];\n\n\t\tif (typeof mComparator !== \"object\" || mComparator === null) {\n\t\t\tthrow new InsightError(`${operator} must be an object.`);\n\t\t}\n\n\t\tconst keys = Object.keys(mComparator);\n\n\t\tif (keys.length !== 1) {\n\t\t\tthrow new InsightError(`${operator} must have exactly one key.`);\n\t\t}\n\n\t\tconst key = keys[0];\n\t\tconst value = mComparator[key];\n\n\t\tif (typeof value !== \"number\") {\n\t\t\tthrow new InsightError(`Value of ${operator} must be a number.`);\n\t\t}\n\n\t\treturn {\n\t\t\ttype: \"MCOMPARISON\",\n\t\t\tkey: key,\n\t\t\toperator: operator,\n\t\t\tvalue: value,\n\t\t};\n\t}\n\n\tprivate static parseSComparison(filter: any): Comparison {\n\t\tconst operator = \"IS\";\n\t\tconst sComparator = filter[operator];\n\n\t\tif (typeof sComparator !== \"object\" || sComparator === null) {\n\t\t\tthrow new InsightError(`${operator} must be an object.`);\n\t\t}\n\n\t\tconst keys = Object.keys(sComparator);\n\n\t\tif (keys.length !== 1) {\n\t\t\tthrow new InsightError(`${operator} must have exactly one key.`);\n\t\t}\n\n\t\tconst key = keys[0];\n\t\tconst value = sComparator[key];\n\n\t\tif (typeof value !== \"string\") {\n\t\t\tthrow new InsightError(`Value of ${operator} must be a string.`);\n\t\t}\n\n\t\treturn {\n\t\t\ttype: \"SCOMPARISON\",\n\t\t\tkey: key,\n\t\t\toperator: operator,\n\t\t\tvalue: value,\n\t\t};\n\t}\n\n\tprivate static parseOptions(options: any): Options {\n\t\tif (typeof options !== \"object\" || options === null) {\n\t\t\tthrow new InsightError(\"OPTIONS must be an object.\");\n\t\t}\n\n\t\tif (!(\"COLUMNS\" in options)) {\n\t\t\tthrow new InsightError(\"OPTIONS must contain COLUMNS.\");\n\t\t}\n\n\t\tconst columns = options.COLUMNS;\n\n\t\tif (!Array.isArray(columns) || columns.length === 0) {\n\t\t\tthrow new InsightError(\"COLUMNS must be a non-empty array.\");\n\t\t}\n\n\t\t// for (const col of columns) {\n\t\t// \tif (typeof col !== \"string\") {\n\t\t// \t\tthrow new InsightError(\"COLUMNS must contain only strings.\");\n\t\t// \t}\n\t\t// }\n\n\t\tlet order: Order | undefined;\n\t\tif (\"ORDER\" in options) {\n\t\t\torder = this.parseOrder(options.ORDER, columns);\n\t\t}\n\n\t\tconst resultOptions: Options = {\n\t\t\tCOLUMNS: columns,\n\t\t};\n\t\tif (order !== undefined) {\n\t\t\tresultOptions.ORDER = order;\n\t\t}\n\t\treturn resultOptions;\n\t}\n\n\tprivate static parseOrder(order: any, columns: string[]): Order {\n\t\tif (typeof order === \"string\") {\n\t\t\tif (!columns.includes(order)) {\n\t\t\t\tthrow new InsightError(\"ORDER key must be in COLUMNS.\");\n\t\t\t}\n\t\t\treturn order;\n\t\t} else if (typeof order === \"object\" && order !== null) {\n\t\t\treturn this.parseOrderObject(order, columns);\n\t\t} else {\n\t\t\tthrow new InsightError(\"ORDER must be a string or an object.\");\n\t\t}\n\t}\n\n\tprivate static parseOrderObject(orderObj: any, columns: string[]): OrderObject {\n\t\tif (!(\"dir\" in orderObj) || !(\"keys\" in orderObj)) {\n\t\t\tthrow new InsightError(\"ORDER object must contain dir and keys.\");\n\t\t}\n\n\t\tconst dir = orderObj.dir;\n\t\tconst keys = orderObj.keys;\n\n\t\tif (dir !== \"UP\" && dir !== \"DOWN\") {\n\t\t\tthrow new InsightError(\"ORDER dir must be 'UP' or 'DOWN'.\");\n\t\t}\n\n\t\tif (!Array.isArray(keys) || keys.length === 0) {\n\t\t\tthrow new InsightError(\"ORDER keys must be a non-empty array.\");\n\t\t}\n\n\t\tfor (const key of keys) {\n\t\t\t// if (typeof key !== \"string\") {\n\t\t\t// \tthrow new InsightError(\"ORDER keys must be strings.\");\n\t\t\t// }\n\t\t\tif (!columns.includes(key)) {\n\t\t\t\tthrow new InsightError(\"ORDER keys must be in COLUMNS.\");\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdir: dir,\n\t\t\tkeys: keys,\n\t\t};\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d9778a855bcf5df849ca9d67bcba9cddcac55901","contentHash":"eead93ff9058d62555207c70e009da97fd53223b78b838efc142a0a6c95cc8e6"},"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\query\\QueryExecutor.ts":{"path":"C:\\Users\\Enzo\\Documents\\Enzo\\UBC\\Year 3\\Term 1\\Cpsc 310\\teamfolder\\project_team165\\src\\controller\\query\\QueryExecutor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":53}},"3":{"start":{"line":9,"column":8},"end":{"line":9,"column":33}},"4":{"start":{"line":10,"column":8},"end":{"line":10,"column":27}},"5":{"start":{"line":13,"column":27},"end":{"line":13,"column":56}},"6":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"7":{"start":{"line":15,"column":12},"end":{"line":15,"column":97}},"8":{"start":{"line":17,"column":26},"end":{"line":17,"column":51}},"9":{"start":{"line":18,"column":24},"end":{"line":18,"column":71}},"10":{"start":{"line":18,"column":51},"end":{"line":18,"column":70}},"11":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"12":{"start":{"line":20,"column":12},"end":{"line":20,"column":103}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":56}},"14":{"start":{"line":25,"column":25},"end":{"line":25,"column":40}},"15":{"start":{"line":26,"column":8},"end":{"line":30,"column":11}},"16":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"17":{"start":{"line":28,"column":16},"end":{"line":28,"column":46}},"18":{"start":{"line":31,"column":8},"end":{"line":35,"column":11}},"19":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"20":{"start":{"line":33,"column":16},"end":{"line":33,"column":46}},"21":{"start":{"line":36,"column":33},"end":{"line":36,"column":72}},"22":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"23":{"start":{"line":38,"column":12},"end":{"line":38,"column":97}},"24":{"start":{"line":40,"column":8},"end":{"line":40,"column":66}},"25":{"start":{"line":43,"column":27},"end":{"line":43,"column":36}},"26":{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},"27":{"start":{"line":45,"column":25},"end":{"line":45,"column":42}},"28":{"start":{"line":46,"column":12},"end":{"line":46,"column":31}},"29":{"start":{"line":48,"column":8},"end":{"line":48,"column":66}},"30":{"start":{"line":49,"column":8},"end":{"line":49,"column":26}},"31":{"start":{"line":52,"column":8},"end":{"line":65,"column":9}},"32":{"start":{"line":54,"column":13},"end":{"line":65,"column":9}},"33":{"start":{"line":55,"column":25},"end":{"line":55,"column":46}},"34":{"start":{"line":56,"column":12},"end":{"line":56,"column":31}},"35":{"start":{"line":58,"column":13},"end":{"line":65,"column":9}},"36":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"37":{"start":{"line":60,"column":16},"end":{"line":60,"column":72}},"38":{"start":{"line":63,"column":13},"end":{"line":65,"column":9}},"39":{"start":{"line":64,"column":12},"end":{"line":64,"column":72}},"40":{"start":{"line":68,"column":8},"end":{"line":84,"column":9}},"41":{"start":{"line":70,"column":16},"end":{"line":70,"column":28}},"42":{"start":{"line":73,"column":16},"end":{"line":73,"column":84}},"43":{"start":{"line":73,"column":45},"end":{"line":73,"column":82}},"44":{"start":{"line":75,"column":16},"end":{"line":75,"column":56}},"45":{"start":{"line":77,"column":39},"end":{"line":77,"column":45}},"46":{"start":{"line":78,"column":37},"end":{"line":78,"column":82}},"47":{"start":{"line":79,"column":36},"end":{"line":79,"column":57}},"48":{"start":{"line":80,"column":16},"end":{"line":80,"column":69}},"49":{"start":{"line":80,"column":45},"end":{"line":80,"column":67}},"50":{"start":{"line":83,"column":16},"end":{"line":83,"column":94}},"51":{"start":{"line":87,"column":26},"end":{"line":87,"column":53}},"52":{"start":{"line":88,"column":26},"end":{"line":88,"column":41}},"53":{"start":{"line":89,"column":32},"end":{"line":89,"column":48}},"54":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"55":{"start":{"line":91,"column":12},"end":{"line":91,"column":108}},"56":{"start":{"line":93,"column":8},"end":{"line":104,"column":9}},"57":{"start":{"line":95,"column":16},"end":{"line":95,"column":51}},"58":{"start":{"line":97,"column":16},"end":{"line":97,"column":51}},"59":{"start":{"line":99,"column":16},"end":{"line":99,"column":53}},"60":{"start":{"line":101,"column":16},"end":{"line":101,"column":67}},"61":{"start":{"line":103,"column":16},"end":{"line":103,"column":115}},"62":{"start":{"line":107,"column":24},"end":{"line":107,"column":83}},"63":{"start":{"line":108,"column":27},"end":{"line":119,"column":9}},"64":{"start":{"line":120,"column":8},"end":{"line":120,"column":46}},"65":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"66":{"start":{"line":124,"column":12},"end":{"line":124,"column":25}},"67":{"start":{"line":126,"column":31},"end":{"line":126,"column":39}},"68":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"69":{"start":{"line":128,"column":12},"end":{"line":128,"column":108}},"70":{"start":{"line":130,"column":31},"end":{"line":130,"column":78}},"71":{"start":{"line":131,"column":29},"end":{"line":131,"column":76}},"72":{"start":{"line":132,"column":22},"end":{"line":132,"column":46}},"73":{"start":{"line":133,"column":8},"end":{"line":133,"column":33}},"74":{"start":{"line":136,"column":8},"end":{"line":151,"column":9}},"75":{"start":{"line":137,"column":12},"end":{"line":139,"column":21}},"76":{"start":{"line":138,"column":16},"end":{"line":138,"column":63}},"77":{"start":{"line":141,"column":13},"end":{"line":151,"column":9}},"78":{"start":{"line":142,"column":30},"end":{"line":142,"column":39}},"79":{"start":{"line":143,"column":12},"end":{"line":146,"column":13}},"80":{"start":{"line":144,"column":37},"end":{"line":144,"column":67}},"81":{"start":{"line":145,"column":16},"end":{"line":145,"column":68}},"82":{"start":{"line":145,"column":47},"end":{"line":145,"column":66}},"83":{"start":{"line":147,"column":12},"end":{"line":147,"column":41}},"84":{"start":{"line":150,"column":12},"end":{"line":150,"column":101}},"85":{"start":{"line":154,"column":8},"end":{"line":156,"column":9}},"86":{"start":{"line":155,"column":12},"end":{"line":155,"column":85}},"87":{"start":{"line":157,"column":24},"end":{"line":157,"column":39}},"88":{"start":{"line":158,"column":22},"end":{"line":165,"column":10}},"89":{"start":{"line":159,"column":27},"end":{"line":159,"column":29}},"90":{"start":{"line":160,"column":12},"end":{"line":163,"column":13}},"91":{"start":{"line":161,"column":37},"end":{"line":161,"column":56}},"92":{"start":{"line":162,"column":16},"end":{"line":162,"column":55}},"93":{"start":{"line":164,"column":12},"end":{"line":164,"column":26}},"94":{"start":{"line":166,"column":8},"end":{"line":178,"column":9}},"95":{"start":{"line":167,"column":29},"end":{"line":167,"column":102}},"96":{"start":{"line":168,"column":30},"end":{"line":168,"column":104}},"97":{"start":{"line":169,"column":12},"end":{"line":177,"column":15}},"98":{"start":{"line":170,"column":16},"end":{"line":172,"column":17}},"99":{"start":{"line":171,"column":20},"end":{"line":171,"column":37}},"100":{"start":{"line":173,"column":16},"end":{"line":175,"column":17}},"101":{"start":{"line":174,"column":20},"end":{"line":174,"column":38}},"102":{"start":{"line":176,"column":16},"end":{"line":176,"column":25}},"103":{"start":{"line":179,"column":8},"end":{"line":179,"column":23}},"104":{"start":{"line":182,"column":0},"end":{"line":182,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":26},"end":{"line":11,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":25},"end":{"line":23,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":43},"end":{"line":18,"column":44}},"loc":{"start":{"line":18,"column":51},"end":{"line":18,"column":70}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":40},"end":{"line":41,"column":5}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":26,"column":25},"end":{"line":26,"column":26}},"loc":{"start":{"line":26,"column":35},"end":{"line":30,"column":9}},"line":26},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":25},"end":{"line":31,"column":26}},"loc":{"start":{"line":31,"column":35},"end":{"line":35,"column":9}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":29},"end":{"line":50,"column":5}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":52},"end":{"line":66,"column":5}},"line":51},"8":{"name":"(anonymous_8)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":30},"end":{"line":85,"column":5}},"line":67},"9":{"name":"(anonymous_9)","decl":{"start":{"line":73,"column":35},"end":{"line":73,"column":36}},"loc":{"start":{"line":73,"column":45},"end":{"line":73,"column":82}},"line":73},"10":{"name":"(anonymous_10)","decl":{"start":{"line":80,"column":35},"end":{"line":80,"column":36}},"loc":{"start":{"line":80,"column":45},"end":{"line":80,"column":67}},"line":80},"11":{"name":"(anonymous_11)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":41},"end":{"line":105,"column":5}},"line":86},"12":{"name":"(anonymous_12)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":16},"end":{"line":121,"column":5}},"line":106},"13":{"name":"(anonymous_13)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":31},"end":{"line":134,"column":5}},"line":122},"14":{"name":"(anonymous_14)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":31},"end":{"line":152,"column":5}},"line":135},"15":{"name":"(anonymous_15)","decl":{"start":{"line":137,"column":40},"end":{"line":137,"column":41}},"loc":{"start":{"line":137,"column":67},"end":{"line":139,"column":13}},"line":137},"16":{"name":"(anonymous_16)","decl":{"start":{"line":145,"column":37},"end":{"line":145,"column":38}},"loc":{"start":{"line":145,"column":47},"end":{"line":145,"column":66}},"line":145},"17":{"name":"(anonymous_17)","decl":{"start":{"line":153,"column":4},"end":{"line":153,"column":5}},"loc":{"start":{"line":153,"column":44},"end":{"line":180,"column":5}},"line":153},"18":{"name":"(anonymous_18)","decl":{"start":{"line":158,"column":43},"end":{"line":158,"column":44}},"loc":{"start":{"line":158,"column":56},"end":{"line":165,"column":9}},"line":158},"19":{"name":"(anonymous_19)","decl":{"start":{"line":169,"column":35},"end":{"line":169,"column":36}},"loc":{"start":{"line":169,"column":45},"end":{"line":177,"column":13}},"line":169}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"1":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"2":{"loc":{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":29,"column":13}},{"start":{"line":27,"column":12},"end":{"line":29,"column":13}}],"line":27},"3":{"loc":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},{"start":{"line":32,"column":12},"end":{"line":34,"column":13}}],"line":32},"4":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{"line":37,"column":8},"end":{"line":39,"column":9}}],"line":37},"5":{"loc":{"start":{"line":52,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":65,"column":9}},{"start":{"line":52,"column":8},"end":{"line":65,"column":9}}],"line":52},"6":{"loc":{"start":{"line":54,"column":13},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":13},"end":{"line":65,"column":9}},{"start":{"line":54,"column":13},"end":{"line":65,"column":9}}],"line":54},"7":{"loc":{"start":{"line":54,"column":17},"end":{"line":54,"column":79}},"type":"binary-expr","locations":[{"start":{"line":54,"column":17},"end":{"line":54,"column":46}},{"start":{"line":54,"column":50},"end":{"line":54,"column":79}}],"line":54},"8":{"loc":{"start":{"line":58,"column":13},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":13},"end":{"line":65,"column":9}},{"start":{"line":58,"column":13},"end":{"line":65,"column":9}}],"line":58},"9":{"loc":{"start":{"line":63,"column":13},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":13},"end":{"line":65,"column":9}},{"start":{"line":63,"column":13},"end":{"line":65,"column":9}}],"line":63},"10":{"loc":{"start":{"line":68,"column":8},"end":{"line":84,"column":9}},"type":"switch","locations":[{"start":{"line":69,"column":12},"end":{"line":70,"column":28}},{"start":{"line":71,"column":12},"end":{"line":71,"column":31}},{"start":{"line":72,"column":12},"end":{"line":73,"column":84}},{"start":{"line":74,"column":12},"end":{"line":75,"column":56}},{"start":{"line":76,"column":12},"end":{"line":81,"column":13}},{"start":{"line":82,"column":12},"end":{"line":83,"column":94}}],"line":68},"11":{"loc":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},{"start":{"line":90,"column":8},"end":{"line":92,"column":9}}],"line":90},"12":{"loc":{"start":{"line":93,"column":8},"end":{"line":104,"column":9}},"type":"switch","locations":[{"start":{"line":94,"column":12},"end":{"line":95,"column":51}},{"start":{"line":96,"column":12},"end":{"line":97,"column":51}},{"start":{"line":98,"column":12},"end":{"line":99,"column":53}},{"start":{"line":100,"column":12},"end":{"line":101,"column":67}},{"start":{"line":102,"column":12},"end":{"line":103,"column":115}}],"line":93},"13":{"loc":{"start":{"line":107,"column":24},"end":{"line":107,"column":83}},"type":"cond-expr","locations":[{"start":{"line":107,"column":44},"end":{"line":107,"column":77}},{"start":{"line":107,"column":80},"end":{"line":107,"column":83}}],"line":107},"14":{"loc":{"start":{"line":120,"column":15},"end":{"line":120,"column":45}},"type":"binary-expr","locations":[{"start":{"line":120,"column":15},"end":{"line":120,"column":34}},{"start":{"line":120,"column":38},"end":{"line":120,"column":45}}],"line":120},"15":{"loc":{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":125,"column":9}},{"start":{"line":123,"column":8},"end":{"line":125,"column":9}}],"line":123},"16":{"loc":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},{"start":{"line":127,"column":8},"end":{"line":129,"column":9}}],"line":127},"17":{"loc":{"start":{"line":136,"column":8},"end":{"line":151,"column":9}},"type":"if","locations":[{"start":{"line":136,"column":8},"end":{"line":151,"column":9}},{"start":{"line":136,"column":8},"end":{"line":151,"column":9}}],"line":136},"18":{"loc":{"start":{"line":141,"column":13},"end":{"line":151,"column":9}},"type":"if","locations":[{"start":{"line":141,"column":13},"end":{"line":151,"column":9}},{"start":{"line":141,"column":13},"end":{"line":151,"column":9}}],"line":141},"19":{"loc":{"start":{"line":154,"column":8},"end":{"line":156,"column":9}},"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":156,"column":9}},{"start":{"line":154,"column":8},"end":{"line":156,"column":9}}],"line":154},"20":{"loc":{"start":{"line":166,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":178,"column":9}},{"start":{"line":166,"column":8},"end":{"line":178,"column":9}}],"line":166},"21":{"loc":{"start":{"line":167,"column":29},"end":{"line":167,"column":102}},"type":"cond-expr","locations":[{"start":{"line":167,"column":65},"end":{"line":167,"column":78}},{"start":{"line":167,"column":81},"end":{"line":167,"column":102}}],"line":167},"22":{"loc":{"start":{"line":168,"column":30},"end":{"line":168,"column":104}},"type":"cond-expr","locations":[{"start":{"line":168,"column":98},"end":{"line":168,"column":100}},{"start":{"line":168,"column":103},"end":{"line":168,"column":104}}],"line":168},"23":{"loc":{"start":{"line":168,"column":30},"end":{"line":168,"column":95}},"type":"binary-expr","locations":[{"start":{"line":168,"column":30},"end":{"line":168,"column":63}},{"start":{"line":168,"column":67},"end":{"line":168,"column":95}}],"line":168},"24":{"loc":{"start":{"line":170,"column":16},"end":{"line":172,"column":17}},"type":"if","locations":[{"start":{"line":170,"column":16},"end":{"line":172,"column":17}},{"start":{"line":170,"column":16},"end":{"line":172,"column":17}}],"line":170},"25":{"loc":{"start":{"line":173,"column":16},"end":{"line":175,"column":17}},"type":"if","locations":[{"start":{"line":173,"column":16},"end":{"line":175,"column":17}},{"start":{"line":173,"column":16},"end":{"line":175,"column":17}}],"line":173}},"s":{"0":1,"1":1,"2":1,"3":32,"4":32,"5":32,"6":32,"7":3,"8":29,"9":29,"10":29,"11":29,"12":1,"13":28,"14":28,"15":28,"16":1809136,"17":1119748,"18":28,"19":1809136,"20":1809136,"21":28,"22":27,"23":2,"24":25,"25":32,"26":32,"27":86,"28":86,"29":32,"30":32,"31":86,"32":86,"33":60,"34":60,"35":26,"36":24,"37":52,"38":2,"39":2,"40":80,"41":0,"42":55,"43":2713488,"44":23,"45":2,"46":2,"47":2,"48":2,"49":64986,"50":0,"51":2713488,"52":2713488,"53":2713488,"54":2713488,"55":0,"56":2713488,"57":1163016,"58":406676,"59":581511,"60":562285,"61":0,"62":2756666,"63":2756666,"64":2756666,"65":562285,"66":0,"67":562285,"68":562285,"69":1,"70":562284,"71":562284,"72":562284,"73":562284,"74":23,"75":12,"76":25,"77":11,"78":11,"79":11,"80":25,"81":25,"82":12377,"83":11,"84":0,"85":25,"86":0,"87":25,"88":25,"89":22938,"90":22938,"91":43178,"92":43178,"93":22938,"94":25,"95":10,"96":10,"97":10,"98":138418,"99":43822,"100":94596,"101":71265,"102":23331,"103":25,"104":1},"f":{"0":32,"1":32,"2":29,"3":28,"4":1809136,"5":1809136,"6":32,"7":86,"8":80,"9":2713488,"10":64986,"11":2713488,"12":2756666,"13":562285,"14":23,"15":25,"16":12377,"17":25,"18":22938,"19":138418},"b":{"0":[3,29],"1":[1,28],"2":[1119748,689388],"3":[1809136,0],"4":[2,25],"5":[0,86],"6":[60,26],"7":[86,43],"8":[24,2],"9":[2,0],"10":[0,38,55,23,2,0],"11":[0,2713488],"12":[1163016,406676,581511,562285,0],"13":[2756666,0],"14":[2756666,0],"15":[0,562285],"16":[1,562284],"17":[12,11],"18":[11,0],"19":[0,25],"20":[10,15],"21":[10,0],"22":[0,10],"23":[10,0],"24":[43822,94596],"25":[71265,23331]},"inputSourceMap":{"version":3,"file":"C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/query/QueryExecutor.ts","sources":["C:/Users/Enzo/Documents/Enzo/UBC/Year 3/Term 1/Cpsc 310/teamfolder/project_team165/src/controller/query/QueryExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Query, Filter, Comparison, LogicComparison, Negation } from \"./IQuery\"; // removed Option, OrderObject for testing purposes.\nimport { InsightResult, InsightError, ResultTooLargeError } from \"../IInsightFacade\"; // Removed InsightDataset\n\n//import fs from \"fs-extra\";\n\nexport class QueryExecutor {\n\tprivate datasets: any[];\n\tprivate maxNum: number;\n\n\tconstructor(datasets: any[]) {\n\t\tthis.datasets = datasets;\n\t\tthis.maxNum = 5000;\n\t}\n\n\tpublic async execute(query: Query): Promise<InsightResult[]> {\n\t\t// find dataset id from query\n\t\tconst datasetIds = this.extractDatasetIds(query);\n\n\t\tif (datasetIds.size !== 1) {\n\t\t\tthrow new InsightError(\"Query must reference exactly one dataset.\");\n\t\t}\n\n\t\tconst datasetId = Array.from(datasetIds)[0];\n\t\tconst dataset = this.datasets.find((ds) => ds.id === datasetId);\n\t\t//console.log(dataset);\n\n\t\tif (!dataset) {\n\t\t\tthrow new InsightError(`Dataset ${datasetId} not found in the executor.`);\n\t\t}\n\n\t\t// perform the query\n\t\treturn this.evaluateQuery(this.datasets, query);\n\t}\n\n\tprivate async evaluateQuery(dataset: any[], query: Query): Promise<InsightResult[]> {\n\t\t// retrieve the sections for the dataset from disk\n\t\t//const sections = await this.getSectionDataForDataset(dataset.id);\n\t\t//console.log(sections);\n\n\t\t// apply the WHERE clause\n\t\tconst realData: any[] = dataset[0].data;\n\t\trealData.forEach((item) => {\n\t\t\tif (typeof item.year === \"string\") {\n\t\t\t\titem.year = Number(item.year);\n\t\t\t}\n\t\t});\n\n\t\trealData.forEach((item) => {\n\t\t\tif (typeof item.uuid === \"number\") {\n\t\t\t\titem.uuid = String(item.uuid);\n\t\t\t}\n\t\t});\n\t\tconst filteredSections = this.applyFilter(realData, query.WHERE);\n\t\t//console.log(filteredSections.length);\n\n\t\t// console.log(\"Filtered Sections:\", filteredSections);\n\t\tif (filteredSections.length > this.maxNum) {\n\t\t\tthrow new ResultTooLargeError(\"Query results exceed 5000 entries.\");\n\t\t}\n\n\t\t// apply the OPTIONS clause\n\t\treturn this.applyOptions(filteredSections, query.OPTIONS);\n\t}\n\n\t// private async getSectionDataForDataset(datasetId: string): Promise<any[]> {\n\t// \ttry {\n\t// \t\t// read the JSON file from the data folder\n\t// \t\tlet data = await fs.readJSON(`data/data.JSON`);\n\t// \t\t// parse it\n\t// \t\tif (typeof data === \"string\") {\n\t// \t\t\tdata = JSON.parse(data);\n\t// \t\t}\n\t// \t\tif (!data?.result) {\n\t// \t\t\tthrow new InsightError(`Data for dataset ${datasetId} is missing or corrupted.`);\n\t// \t\t}\n\t// \t\t//console.log(data.result);\n\t// \t\treturn data.result;\n\t// \t} catch (err) {\n\t// \t\tthrow new InsightError(`Failed to read dataset from disk: ${err}`);\n\t// \t}\n\t// }\n\n\tprivate extractDatasetIds(query: Query): Set<string> {\n\t\tconst datasetIds = new Set<string>();\n\n\t\t// extract dataset IDs from COLUMNS\n\t\tfor (const column of query.OPTIONS.COLUMNS) {\n\t\t\tconst [id] = column.split(\"_\");\n\t\t\tdatasetIds.add(id);\n\t\t}\n\n\t\t// extract dataset IDs from WHERE clause\n\t\tthis.collectDatasetIdsFromFilter(query.WHERE, datasetIds);\n\n\t\treturn datasetIds;\n\t}\n\n\tprivate collectDatasetIdsFromFilter(filter: Filter, datasetIds: Set<string>): void {\n\t\tif (filter.type === \"EMPTY\") {\n\t\t\t// Do nothing LOL\n\t\t} else if (filter.type === \"MCOMPARISON\" || filter.type === \"SCOMPARISON\") {\n\t\t\tconst [id] = filter.key.split(\"_\");\n\t\t\tdatasetIds.add(id);\n\t\t} else if (filter.type === \"LOGIC\") {\n\t\t\tfor (const subFilter of filter.filters) {\n\t\t\t\tthis.collectDatasetIdsFromFilter(subFilter, datasetIds);\n\t\t\t}\n\t\t} else if (filter.type === \"NOT\") {\n\t\t\tthis.collectDatasetIdsFromFilter(filter.filter, datasetIds);\n\t\t}\n\t}\n\n\tprivate applyFilter(data: any[], filter: Filter): any[] {\n\t\t//console.log(filter.type);\n\t\tswitch (filter.type) {\n\t\t\tcase \"EMPTY\":\n\t\t\t\treturn data;\n\n\t\t\tcase \"MCOMPARISON\":\n\t\t\tcase \"SCOMPARISON\":\n\t\t\t\treturn data.filter((item) => this.evaluateComparison(filter as Comparison, item));\n\n\t\t\tcase \"LOGIC\":\n\t\t\t\treturn this.evaluateLogic(filter as LogicComparison, data);\n\n\t\t\tcase \"NOT\": {\n\t\t\t\tconst negationFilter = filter as Negation;\n\t\t\t\tconst includedData = this.applyFilter(data, negationFilter.filter); // hopefully apply the negated filter\n\t\t\t\tconst excludedSet = new Set(includedData);\n\t\t\t\treturn data.filter((item) => !excludedSet.has(item)); // return items not in the negated result\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(`Unsupported filter type: ${filter}`);\n\t\t}\n\t}\n\n\tprivate evaluateComparison(comparison: Comparison, item: any): boolean {\n\t\tconst mappedKey = this.mapKey(comparison.key);\n\t\t//console.log(item);\n\t\tconst itemValue = item[mappedKey];\n\t\t//console.log(itemValue)\n\n\t\tconst comparisonValue = comparison.value;\n\t\t//console.log(comparison.operator);\n\t\tif (itemValue === undefined) {\n\t\t\tthrow new InsightError(`Key ${comparison.key} does not exist in the dataset.`);\n\t\t}\n\n\t\tswitch (comparison.operator) {\n\t\t\tcase \"GT\":\n\t\t\t\treturn itemValue > comparisonValue;\n\t\t\tcase \"LT\":\n\t\t\t\treturn itemValue < comparisonValue;\n\t\t\tcase \"EQ\":\n\t\t\t\treturn itemValue === comparisonValue;\n\t\t\tcase \"IS\":\n\t\t\t\treturn this.evaluateIs(comparisonValue as string, itemValue);\n\t\t\tdefault:\n\t\t\t\tthrow new InsightError(`Unsupported comparison operator: ${comparison.operator}`);\n\t\t}\n\t}\n\n\tprivate mapKey(key: string): string {\n\t\t// extract the key by removing any prefix before the first underscore\n\t\tconst coreKey = key.includes(\"_\") ? key.split(\"_\").slice(1).join(\"_\") : key;\n\n\t\t// define the mapping for the core keys\n\t\tconst keyMapping: Record<string, string> = {\n\t\t\tuuid: \"uuid\",\n\t\t\tid: \"id\",\n\t\t\ttitle: \"title\",\n\t\t\tinstructor: \"instructor\",\n\t\t\tdept: \"dept\",\n\t\t\tyear: \"year\",\n\t\t\tavg: \"avg\",\n\t\t\tpass: \"pass\",\n\t\t\tfail: \"fail\",\n\t\t\taudit: \"audit\",\n\t\t};\n\n\t\t// return the mapped key or the core key if not found in the mapping\n\t\t//console.log(keyMapping[coreKey]);\n\t\t//console.log(\"Mapping key:\", coreKey, \"to\", keyMapping[coreKey] || coreKey);\n\n\t\treturn keyMapping[coreKey] || coreKey;\n\t}\n\n\tprivate evaluateIs(pattern: string, value: any): boolean {\n\t\tif (typeof value !== \"string\") {\n\t\t\treturn false;\n\t\t}\n\n\t\t// check for wildcards in the middle (not allowed)\n\t\tconst middleWildcard = /.+\\*.+/;\n\t\tif (middleWildcard.test(pattern)) {\n\t\t\tthrow new InsightError(\"Middle wildcards are not allowed in the IS operator.\");\n\t\t}\n\n\t\t// escape special regex characters and replace '*' with '.*'\n\t\tconst escapedPattern = pattern.replace(/([.+?^${}()|[\\]\\\\])/g, \"\\\\$1\");\n\t\tconst regexPattern = \"^\" + escapedPattern.replace(/\\*/g, \".*\") + \"$\";\n\t\tconst regex = new RegExp(regexPattern);\n\n\t\treturn regex.test(value);\n\t}\n\n\tprivate evaluateLogic(logic: LogicComparison, data: any[]): any[] {\n\t\tif (logic.operator === \"AND\") {\n\t\t\treturn logic.filters.reduce((result, currentFilter) => {\n\t\t\t\treturn this.applyFilter(result, currentFilter);\n\t\t\t}, data);\n\t\t} else if (logic.operator === \"OR\") {\n\t\t\tconst resultSet = new Set<any>();\n\t\t\tfor (const filter of logic.filters) {\n\t\t\t\tconst filteredData = this.applyFilter(data, filter);\n\t\t\t\tfilteredData.forEach((item) => resultSet.add(item));\n\t\t\t}\n\t\t\treturn Array.from(resultSet);\n\t\t} else {\n\t\t\tthrow new InsightError(`Unsupported logic operator: ${logic.operator}`);\n\t\t}\n\t}\n\n\tprivate applyOptions(filteredSections: any[], options: any): InsightResult[] {\n\t\tif (!options?.COLUMNS) {\n\t\t\tthrow new InsightError(\"OPTIONS must contain COLUMNS.\");\n\t\t}\n\n\t\tconst columns = options.COLUMNS; // list of columns to include in the result\n\t\tlet results = filteredSections.map((section) => {\n\t\t\tconst result: InsightResult = {};\n\t\t\tfor (const column of columns) {\n\t\t\t\tconst mappedColumn = this.mapKey(column);\n\t\t\t\tresult[column] = section[mappedColumn];\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// apply ORDER clause if it exists\n\t\tif (options.ORDER) {\n\t\t\tconst orderKey = typeof options.ORDER === \"string\" ? options.ORDER : options.ORDER.keys[0];\n\t\t\tconst direction = typeof options.ORDER === \"object\" && options.ORDER.dir === \"DOWN\" ? -1 : 1;\n\n\t\t\tresults = results.sort((a, b) => {\n\t\t\t\tif (a[orderKey] > b[orderKey]) {\n\t\t\t\t\treturn direction;\n\t\t\t\t}\n\t\t\t\tif (a[orderKey] < b[orderKey]) {\n\t\t\t\t\treturn -direction;\n\t\t\t\t}\n\t\t\t\treturn 0; // 0 keep original order for equal values I think??\n\t\t\t});\n\t\t}\n\t\treturn results;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a704c5d101e3ed49a93fcf5fc22c8d7c5cade338","contentHash":"db8b381a6d08e9ffbbca8fab5894b13833cb794c21362ef7b2e02bbf885d4262"}}